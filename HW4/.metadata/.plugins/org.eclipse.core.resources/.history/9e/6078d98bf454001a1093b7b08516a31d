.cpu cortex-m0
.thumb
.syntax unified
.fpu softvfp

//============================================================================
// Q1: hello
//============================================================================
.global hello
hello:
	push {lr}
	ldr r0, =hello_string
	bl printf
	pop {pc}

hello_string:
	.string "Hello, World!\n"
	.align 2
//============================================================================
// Q2: add2
//============================================================================
.global add2
add2:
	// r0 = a
	// r1 = b
	push {lr}
	adds r3, r0, r1
	movs r2, r1
	movs r1, r0
	ldr r0, =format1
	bl printf

	pop {pc}

format1:
	.string "%d + %d = %d\n"
	.align 2
//============================================================================
// Q3: add3
//============================================================================
.global add3
add3:
	// r0 = a
	// r1 = b
	// r2 = c
	push {r4-r7, lr}
	ldr r0, =format2
	movs r3, r2
	movs r2, r1
	movs r1, r0
	adds r4, r1, r2
	adds r4, r3

	sub sp, #4
	str r4, [sp, #0]

	bl printf

	add sp, #4
	pop {r4-r7, pc}
format2:
 .string "%d + %d + %d = %d\n"
 .align 2

//============================================================================
// Q4: rotate6
//============================================================================
.global rotate6
rotate6:
// r0 = a
// r1 = b
// r2 = c
// r3 = d
// 20 = e
// 24 = f
	push {r4-r7, lr}
	if1:
		cmp r0, #0
		beq endif1
	then1:
		ldr r4, [sp, #20] // r4 = e
		ldr r5, [sp, #24] // r5 = f
		//rotate
		movs r6, r5 // r6 = f
		movs r5, r4 // r5 = e
		movs r4, r3 // r4 = d
		movs r3, r2 // r3 = c
		movs r2, r1 // r2 = b
		movs r1, r0 // r1 = a
		movs r0, r6
		sub sp, #4
		str r4, [sp]
		sub sp, #4
		str r5, [sp]
		bl rotate6
		add sp, #8
		pop {r4-r7, pc}
	endif1:
	subs r6, r5
	subs r6, r4
	subs r6, r3
	subs r6, r2
	subs r6, r1
	pop {r4-r7, pc}


//============================================================================
// Q5: low_pattern
//============================================================================
.type compare, %function  // You knew you needed this line.  Of course you did!
compare:
        ldr  r0,[r0]
        ldr  r1,[r1]
        subs r0,r1
        bx lr

.global low_pattern
low_pattern:

//============================================================================
// Q6: get_name
//============================================================================
.global get_name
get_name:

//============================================================================
// Q7: random_sum
//============================================================================
.global random_sum
random_sum:

//============================================================================
// Q8: fibn
//============================================================================
.global fibn
fibn:

//============================================================================
// Q9: fun
//============================================================================
.global fun
fun:

//============================================================================
// Q10: sick
//============================================================================
.global sick
sick:


