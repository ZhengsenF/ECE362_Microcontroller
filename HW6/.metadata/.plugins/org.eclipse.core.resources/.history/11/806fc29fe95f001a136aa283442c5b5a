#include "stm32f0xx.h"
#include "stm32f0_discovery.h"
#include <stdio.h>
#include <stdlib.h>

#define RATE 100000
#define N 1000
extern const short int wavetable[N];

int offset = 0;
int step1 = 554.365 * N / RATE * (1 << 16);
int step2 = 698.456 * N / RATE * (1 << 16);

// This function
// 1) enables clock to port A,
// 2) sets PA0, PA1, PA2 and PA4 to analog mode
void setup_gpio() {
    /* Student code goes here */
	RCC -> AHBENR |= RCC_AHBENR_GPIOAEN;
	GPIOA -> MODER |= 0x33f;
}

// This function should enable the clock to the
// onboard DAC, enable trigger,
// setup software trigger and finally enable the DAC.
void setup_dac() {
    /* Student code goes here */
	RCC -> APB1ENR |= RCC_APB1ENR_DACEN;
	DAC -> CR &= ~DAC_CR_EN1;
	DAC -> CR &= ~DAC_CR_BOFF1;
	DAC -> CR |= DAC_CR_TEN1;
	DAC -> CR |= DAC_CR_TSEL1;
	DAC -> CR |= DAC_CR_EN1;

}

// This function should,
// enable clock to timer6,
// setup pre scalar and arr so that the interrupt is triggered every
// 10us, enable the timer 6 interrupt, and start the timer.
void setup_timer6() {
    /* Student code goes here */
	RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
	TIM6 -> PSC = 48 -1;
	TIM6 -> ARR = 10 - 1;

	TIM6 -> DIER |= TIM_DIER_UIE;
	NVIC -> ISER[0] = 1 << TIM6_DAC_IRQn;
	TIM6 -> CR1 |= TIM_CR1_CEN;

}



// This function should enable the clock to ADC,
// turn on the clocks, wait for ADC to be ready.
void setup_adc() {
    /* Student code goes here */
}

// This function should return the value from the ADC
// conversion of the channel specified by the “channel” variable.
// Make sure to set the right bit in channel selection
// register and do not forget to start adc conversion.
int read_adc_channel(unsigned int channel) {
    /* Student code goes here */
}

void TIM6_DAC_IRQHandler() {
    /* Student code goes here */
	TIM6 -> SR &= 0;
	DAC -> SWTRIGR |= DAC_SWTRIGR_SWTRIG1;

	offset += step;
	if((offset >> 16) >= N)
		offset -= N << 16;
	int sample = wavetable[offset >> 16];
	sample = sample / 16 + 2048;
	DAC -> DHR12R1 = sample;

}

int main(void)
{
    /* Student code goes here */
	init_wavetable();
	setup_gpio();
	setup_dac();
	setup_timer6();
	while(1);
	return 0;
}
